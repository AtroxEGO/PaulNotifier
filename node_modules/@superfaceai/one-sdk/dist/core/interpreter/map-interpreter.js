"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapInterpreter = void 0;
var ast_1 = require("@superfaceai/ast");
var interfaces_1 = require("../../interfaces");
var lib_1 = require("../../lib");
var http_1 = require("./http");
var map_interpreter_errors_1 = require("./map-interpreter.errors");
var sandbox_1 = require("./sandbox");
var DEBUG_NAMESPACE = 'map-interpreter';
function assertUnreachable(node) {
    throw new lib_1.UnexpectedError("Invalid Node kind: " + node.kind);
}
function isIterable(input) {
    return (typeof input === 'object' && input !== null && (Symbol.iterator in input || Symbol.asyncIterator in input));
}
function hasIteration(node) {
    return node.iteration !== undefined;
}
var MapInterpreter = /** @class */ (function () {
    function MapInterpreter(parameters, _a) {
        var fetchInstance = _a.fetchInstance, externalHandler = _a.externalHandler, config = _a.config, logger = _a.logger, crypto = _a.crypto;
        this.parameters = parameters;
        this.operations = {};
        this.stack = [];
        this.http = new http_1.HttpClient(fetchInstance, crypto, logger);
        this.externalHandler = externalHandler !== null && externalHandler !== void 0 ? externalHandler : {};
        this.config = config;
        this.logger = logger;
        this.log = logger === null || logger === void 0 ? void 0 : logger.log(DEBUG_NAMESPACE);
    }
    MapInterpreter.prototype.perform = function (ast) {
        return __awaiter(this, void 0, void 0, function () {
            var result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.ast = ast;
                        if (!(this.parameters.input !== undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.initializeInput(this.parameters.input)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 6, , 7]);
                        return [4 /*yield*/, this.visit(ast)];
                    case 3:
                        result = _a.sent();
                        if (result.error) {
                            return [2 /*return*/, lib_1.err(result.error)];
                        }
                        if (!(this.parameters.input !== undefined)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.destroyInput(this.parameters.input)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, lib_1.ok(result.result)];
                    case 6:
                        e_1 = _a.sent();
                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion, @typescript-eslint/no-explicit-any
                        return [2 /*return*/, lib_1.err(e_1)]; // TODO: this can be HTTPError, UnexpectedError, MappedError, JessieError, MappedHTTPError, SDKBindError
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.visit = function (node) {
        var _a;
        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Visiting node:', node.kind, node.location
            ? "Line: " + node.location.start.line + ", Column: " + node.location.start.column
            : '');
        switch (node.kind) {
            case 'Assignment':
                return this.visitAssignmentNode(node);
            case 'CallStatement':
                return this.visitCallStatementNode(node);
            case 'ConditionAtom':
                return this.visitConditionAtomNode(node);
            case 'HttpCallStatement':
                return this.visitHttpCallStatementNode(node);
            case 'HttpRequest':
                return this.visitHttpRequestNode(node);
            case 'HttpResponseHandler':
                return this.visitHttpResponseHandlerNode(node);
            case 'InlineCall':
                return this.visitInlineCallNode(node);
            case 'IterationAtom':
                return this.visitIterationAtomNode(node);
            case 'JessieExpression':
                return this.visitJessieExpressionNode(node);
            case 'MapDefinition':
                return this.visitMapDefinitionNode(node);
            case 'MapHeader':
                return this.visitMapHeaderNode(node);
            case 'MapDocument':
                return this.visitMapDocumentNode(node);
            case 'ObjectLiteral':
                return this.visitObjectLiteralNode(node);
            case 'OperationDefinition':
                return this.visitOperationDefinitionNode(node);
            case 'OutcomeStatement':
                return this.visitOutcomeStatementNode(node);
            case 'PrimitiveLiteral':
                return this.visitPrimitiveLiteralNode(node);
            case 'SetStatement':
                return this.visitSetStatementNode(node);
            default:
                assertUnreachable(node);
        }
    };
    MapInterpreter.prototype.visitAssignmentNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.visit(node.value)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, this.constructObject(node.key, result)];
                }
            });
        });
    };
    MapInterpreter.prototype.visitConditionAtomNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.visit(node.expression)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, Boolean(result)];
                }
            });
        });
    };
    MapInterpreter.prototype.visitCallStatementNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var processResults, condition, outcome;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!hasIteration(node)) return [3 /*break*/, 2];
                        processResults = function (result, error) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (error !== undefined) {
                                            this.addVariableToStack({ outcome: { error: error } });
                                            this.stackTop().terminate = true;
                                        }
                                        else {
                                            this.addVariableToStack({ outcome: { data: result } });
                                        }
                                        return [4 /*yield*/, this.processStatements(node.statements)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        return [4 /*yield*/, this.iterate(node, processResults)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 2:
                        if (!node.condition) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.visit(node.condition)];
                    case 3:
                        condition = _a.sent();
                        if (condition === false) {
                            return [2 /*return*/];
                        }
                        _a.label = 4;
                    case 4: return [4 /*yield*/, this.visitCallCommon(node)];
                    case 5:
                        outcome = _a.sent();
                        this.addVariableToStack({ outcome: outcome });
                        return [4 /*yield*/, this.processStatements(node.statements)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.visitHttpCallStatementNode = function (node) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function () {
            var serviceUrl, request, _f, responseHandlers, accept, accepts_1, retry, response, responseHandlers_1, responseHandlers_1_1, _g, handler, match, e_2_1, action;
            var e_2, _h;
            var _this = this;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        serviceUrl = this.parameters.services.getUrl(node.serviceId);
                        if (serviceUrl === undefined) {
                            throw new lib_1.UnexpectedError('Base url for a service not provided for HTTP call.');
                        }
                        _f = node.request;
                        if (!_f) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.visit(node.request)];
                    case 1:
                        _f = (_j.sent());
                        _j.label = 2;
                    case 2:
                        request = _f;
                        responseHandlers = node.responseHandlers.map(function (responseHandler) {
                            return _this.visit(responseHandler);
                        });
                        if (responseHandlers.some(function (_a) {
                            var _b = __read(_a, 2), accept = _b[1];
                            return accept === undefined;
                        })) {
                            accept = '*/*';
                        }
                        else {
                            accepts_1 = responseHandlers.map(function (_a) {
                                var _b = __read(_a, 2), accept = _b[1];
                                return accept;
                            });
                            accept = accepts_1
                                // deduplicate the array
                                .filter(function (accept, index) { return accepts_1.indexOf(accept) === index; })
                                .join(', ');
                        }
                        retry = true;
                        _j.label = 3;
                    case 3:
                        if (!retry) return [3 /*break*/, 16];
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Performing http request:', node.url);
                        return [4 /*yield*/, this.http.request(node.url, {
                                method: node.method,
                                headers: request === null || request === void 0 ? void 0 : request.headers,
                                contentType: (_b = request === null || request === void 0 ? void 0 : request.contentType) !== null && _b !== void 0 ? _b : 'application/json',
                                accept: accept,
                                baseUrl: serviceUrl,
                                queryParameters: request === null || request === void 0 ? void 0 : request.queryParameters,
                                pathParameters: this.variables,
                                body: request === null || request === void 0 ? void 0 : request.body,
                                securityRequirements: request === null || request === void 0 ? void 0 : request.security,
                                securityConfiguration: this.parameters.security,
                                integrationParameters: this.parameters.parameters,
                            })];
                    case 4:
                        response = _j.sent();
                        _j.label = 5;
                    case 5:
                        _j.trys.push([5, 10, 11, 12]);
                        responseHandlers_1 = (e_2 = void 0, __values(responseHandlers)), responseHandlers_1_1 = responseHandlers_1.next();
                        _j.label = 6;
                    case 6:
                        if (!!responseHandlers_1_1.done) return [3 /*break*/, 9];
                        _g = __read(responseHandlers_1_1.value, 1), handler = _g[0];
                        return [4 /*yield*/, handler(response)];
                    case 7:
                        match = _j.sent();
                        if (match) {
                            return [2 /*return*/];
                        }
                        _j.label = 8;
                    case 8:
                        responseHandlers_1_1 = responseHandlers_1.next();
                        return [3 /*break*/, 6];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_2_1 = _j.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (responseHandlers_1_1 && !responseHandlers_1_1.done && (_h = responseHandlers_1.return)) _h.call(responseHandlers_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 12:
                        if (!(this.externalHandler.unhandledHttp !== undefined)) return [3 /*break*/, 14];
                        return [4 /*yield*/, ((_d = (_c = this.externalHandler).unhandledHttp) === null || _d === void 0 ? void 0 : _d.call(_c, this.ast, node, response))];
                    case 13:
                        action = (_e = (_j.sent())) !== null && _e !== void 0 ? _e : 'continue';
                        if (action !== 'retry') {
                            retry = false;
                        }
                        return [3 /*break*/, 15];
                    case 14:
                        retry = false;
                        if (response.statusCode >= 400) {
                            throw new map_interpreter_errors_1.HTTPError('HTTP Error', { node: node, ast: this.ast }, response.statusCode, response.debug.request, { body: response.body, headers: response.headers });
                        }
                        _j.label = 15;
                    case 15: return [3 /*break*/, 3];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.visitHttpRequestNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _d = {
                            contentType: node.contentType,
                            contentLanguage: node.contentLanguage
                        };
                        _a = node.headers;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.visit(node.headers)];
                    case 1:
                        _a = (_e.sent());
                        _e.label = 2;
                    case 2:
                        _d.headers = _a;
                        _b = node.query;
                        if (!_b) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.visit(node.query)];
                    case 3:
                        _b = (_e.sent());
                        _e.label = 4;
                    case 4:
                        _d.queryParameters = _b;
                        _c = node.body;
                        if (!_c) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.visit(node.body)];
                    case 5:
                        _c = (_e.sent());
                        _e.label = 6;
                    case 6: return [2 /*return*/, (_d.body = _c,
                            _d.security = node.security,
                            _d)];
                }
            });
        });
    };
    MapInterpreter.prototype.visitHttpResponseHandlerNode = function (node) {
        var _this = this;
        var handler = function (response) { return __awaiter(_this, void 0, void 0, function () {
            var stackTop, debugString, stackTop;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (node.statusCode !== undefined &&
                            node.statusCode !== response.statusCode) {
                            return [2 /*return*/, false];
                        }
                        if (node.contentType !== undefined &&
                            response.headers['content-type'] &&
                            !response.headers['content-type'].includes(node.contentType)) {
                            return [2 /*return*/, false];
                        }
                        if (node.contentLanguage !== undefined &&
                            response.headers['content-language'] &&
                            !response.headers['content-language'].includes(node.contentLanguage)) {
                            return [2 /*return*/, false];
                        }
                        {
                            stackTop = this.stackTop();
                            if (stackTop.type === 'map') {
                                stackTop.context.push('http');
                            }
                        }
                        this.addVariableToStack({
                            body: lib_1.castToVariables(response.body),
                            headers: lib_1.castToVariables(response.headers),
                            statusCode: response.statusCode,
                        });
                        if (((_a = this.log) === null || _a === void 0 ? void 0 : _a.enabled) === true) {
                            debugString = 'Running http handler:';
                            if (node.contentType !== undefined) {
                                debugString += " content-type: \"" + node.contentType + "\"";
                            }
                            if (node.contentLanguage !== undefined) {
                                debugString += " content-language: \"" + node.contentLanguage + "\"";
                            }
                            if (node.statusCode !== undefined) {
                                debugString += " code: \"" + node.statusCode + "\"";
                            }
                            this.log(debugString);
                        }
                        return [4 /*yield*/, this.processStatements(node.statements)];
                    case 1:
                        _b.sent();
                        {
                            stackTop = this.stackTop();
                            if (stackTop.type === 'map') {
                                stackTop.context.pop();
                            }
                        }
                        return [2 /*return*/, true];
                }
            });
        }); };
        return [handler, node.contentType];
    };
    MapInterpreter.prototype.visitInlineCallNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var results_1, processResult, condition, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!hasIteration(node)) return [3 /*break*/, 2];
                        results_1 = [];
                        processResult = function (result, error) {
                            if (error !== undefined) {
                                throw new map_interpreter_errors_1.MapASTError('Unexpected inline call failure.', {
                                    ast: _this.ast,
                                    node: node,
                                });
                            }
                            results_1.push(result);
                        };
                        return [4 /*yield*/, this.iterate(node, processResult)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, results_1];
                    case 2:
                        if (!node.condition) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.visit(node.condition)];
                    case 3:
                        condition = _a.sent();
                        if (condition === false) {
                            return [2 /*return*/, undefined];
                        }
                        _a.label = 4;
                    case 4: return [4 /*yield*/, this.visitCallCommon(node)];
                    case 5:
                        result = _a.sent();
                        return [2 /*return*/, result.data];
                }
            });
        });
    };
    MapInterpreter.prototype.visitIterationAtomNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var iterable;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.visit(node.iterable)];
                    case 1:
                        iterable = _a.sent();
                        if (isIterable(iterable)) {
                            return [2 /*return*/, {
                                    iterationVariable: node.iterationVariable,
                                    iterable: iterable,
                                }];
                        }
                        else {
                            throw new map_interpreter_errors_1.MapASTError("Result of expression: " + node.iterable.expression + " is not iterable.", { node: node, ast: this.ast });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.visitJessieExpressionNode = function (node) {
        try {
            var result = sandbox_1.evalScript(this.config, node.expression, this.logger, this.variables);
            return lib_1.castToVariables(result);
        }
        catch (e) {
            // TODO: fix error types
            throw new map_interpreter_errors_1.JessieError('Error in Jessie script', e, {
                node: node,
                ast: this.ast,
            });
        }
    };
    MapInterpreter.prototype.visitPrimitiveLiteralNode = function (node) {
        return node.value;
    };
    MapInterpreter.prototype.processStatements = function (statements) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var statements_1, statements_1_1, statement, _b, outcome, stackTop, error, statusCode, e_3_1;
            var e_3, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 8, 9, 10]);
                        statements_1 = __values(statements), statements_1_1 = statements_1.next();
                        _d.label = 1;
                    case 1:
                        if (!!statements_1_1.done) return [3 /*break*/, 7];
                        statement = statements_1_1.value;
                        _b = statement.kind;
                        switch (_b) {
                            case 'SetStatement': return [3 /*break*/, 2];
                            case 'HttpCallStatement': return [3 /*break*/, 2];
                            case 'CallStatement': return [3 /*break*/, 2];
                            case 'OutcomeStatement': return [3 /*break*/, 4];
                        }
                        return [3 /*break*/, 6];
                    case 2: return [4 /*yield*/, this.visit(statement)];
                    case 3:
                        _d.sent();
                        if (this.stackTop().terminate) {
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.visit(statement)];
                    case 5:
                        outcome = _d.sent();
                        if (outcome !== undefined && outcome.error) {
                            stackTop = this.stackTop();
                            if (stackTop.type === 'map') {
                                error = void 0;
                                if (stackTop.context[stackTop.context.length - 1] === 'http') {
                                    statusCode = this.stackTop('map').variables.statusCode;
                                    error = new map_interpreter_errors_1.MappedHTTPError('Expected HTTP error', { node: statement, ast: this.ast }, typeof statusCode === 'number' ? statusCode : undefined, outcome === null || outcome === void 0 ? void 0 : outcome.result);
                                }
                                else {
                                    error = new map_interpreter_errors_1.MappedError('Expected error', { node: statement, ast: this.ast }, outcome === null || outcome === void 0 ? void 0 : outcome.result);
                                }
                                this.stackTop('map').error = error;
                            }
                            else {
                                this.stackTop('operation').error = outcome.result;
                            }
                        }
                        else {
                            this.stackTop().result = (outcome === null || outcome === void 0 ? void 0 : outcome.result) === undefined ? this.stackTop().result : outcome.result;
                        }
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Setting result: %O', this.stackTop());
                        if ((outcome === null || outcome === void 0 ? void 0 : outcome.terminateFlow) === true) {
                            this.stackTop().terminate = true;
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 6];
                    case 6:
                        statements_1_1 = statements_1.next();
                        return [3 /*break*/, 1];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (statements_1_1 && !statements_1_1.done && (_c = statements_1.return)) _c.call(statements_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.visitMapDefinitionNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.newStack('map');
                        return [4 /*yield*/, this.processStatements(node.statements)];
                    case 1:
                        _a.sent();
                        if (this.stackTop().error !== undefined) {
                            throw this.stackTop().error;
                        }
                        return [2 /*return*/, {
                                result: this.stackTop().result,
                            }];
                }
            });
        });
    };
    MapInterpreter.prototype.visitMapDocumentNode = function (node) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, operation_1, operation;
            var e_4, _d;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        try {
                            for (_b = __values(node.definitions.filter(ast_1.isOperationDefinitionNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                operation_1 = _c.value;
                                this.operations[operation_1.name] = operation_1;
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        operation = node.definitions
                            .filter(ast_1.isMapDefinitionNode)
                            .find(function (definition) { return definition.usecaseName === _this.parameters.usecase; });
                        if (!operation) {
                            throw new map_interpreter_errors_1.MapASTError("Usecase not found: " + ((_a = this.parameters.usecase) !== null && _a !== void 0 ? _a : 'undefined') + "!", {
                                node: node,
                                ast: this.ast,
                            });
                        }
                        return [4 /*yield*/, this.visit(operation)];
                    case 1: return [2 /*return*/, _e.sent()];
                }
            });
        });
    };
    MapInterpreter.prototype.visitMapHeaderNode = function (_node) {
        throw new lib_1.UnexpectedError('Method not implemented.');
    };
    MapInterpreter.prototype.visitObjectLiteralNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var result, _a, _b, field, _c, _d, _e, _f, e_5_1;
            var e_5, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        result = {};
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 6, 7, 8]);
                        _a = __values(node.fields), _b = _a.next();
                        _h.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        field = _b.value;
                        _c = lib_1.mergeVariables;
                        _d = [result];
                        _e = this.constructObject;
                        _f = [field.key];
                        return [4 /*yield*/, this.visit(field.value)];
                    case 3:
                        result = _c.apply(void 0, _d.concat([_e.apply(this, _f.concat([_h.sent()]))]));
                        _h.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_5_1 = _h.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, result];
                }
            });
        });
    };
    MapInterpreter.prototype.visitOperationDefinitionNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.processStatements(node.statements)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.visitOutcomeStatementNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var condition, result, _a;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!node.condition) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.visit(node.condition)];
                    case 1:
                        condition = _c.sent();
                        if (condition === false) {
                            return [2 /*return*/, undefined];
                        }
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.visit(node.value)];
                    case 3:
                        result = _c.sent();
                        _b = {};
                        if (!(this.stackTop().type === 'map')) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.resolveVariables(result)];
                    case 4:
                        _a = _c.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        _a = result;
                        _c.label = 6;
                    case 6: return [2 /*return*/, (_b.result = _a,
                            _b.error = node.isError,
                            _b.terminateFlow = node.terminateFlow,
                            _b)];
                }
            });
        });
    };
    MapInterpreter.prototype.visitSetStatementNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var condition, result, _a, _b, assignment, _c, _d, e_6_1;
            var e_6, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (!node.condition) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.visit(node.condition)];
                    case 1:
                        condition = _f.sent();
                        if (condition === false) {
                            return [2 /*return*/];
                        }
                        _f.label = 2;
                    case 2:
                        result = {};
                        _f.label = 3;
                    case 3:
                        _f.trys.push([3, 8, 9, 10]);
                        _a = __values(node.assignments), _b = _a.next();
                        _f.label = 4;
                    case 4:
                        if (!!_b.done) return [3 /*break*/, 7];
                        assignment = _b.value;
                        _c = lib_1.mergeVariables;
                        _d = [result];
                        return [4 /*yield*/, this.visit(assignment)];
                    case 5:
                        result = _c.apply(void 0, _d.concat([_f.sent()]));
                        _f.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_6_1 = _f.sent();
                        e_6 = { error: e_6_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                        }
                        finally { if (e_6) throw e_6.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        this.addVariableToStack(result);
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(MapInterpreter.prototype, "variables", {
        get: function () {
            var _a, _b;
            var variables = this.stackTop().variables;
            // for (const stacktop of this.stack) {
            //   variables = mergeVariables(variables, stacktop.variables);
            // }
            // if (this.stackTop.result) {
            //   variables = {
            //     ...variables,
            //     outcome: {
            //       data: this.stackTop.result,
            //     },
            //   };
            // }
            variables = __assign(__assign({}, variables), { input: __assign({}, ((_a = this.parameters.input) !== null && _a !== void 0 ? _a : {})), parameters: __assign({}, ((_b = this.parameters.parameters) !== null && _b !== void 0 ? _b : {})) });
            return variables;
        },
        enumerable: false,
        configurable: true
    });
    MapInterpreter.prototype.addVariableToStack = function (variables) {
        var _a;
        this.stackTop().variables = lib_1.mergeVariables(this.stackTop().variables, variables);
        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Updated stack: %O', this.stackTop());
    };
    MapInterpreter.prototype.constructObject = function (keys, value) {
        var e_7, _a;
        var _b;
        var result = {};
        var current = result;
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                if (key === keys[keys.length - 1]) {
                    current[key] = value;
                }
                else {
                    current = current[key] = {};
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        (_b = this.log) === null || _b === void 0 ? void 0 : _b.call(this, 'Constructing object:', keys.join('.'), '=', value);
        return result;
    };
    MapInterpreter.prototype.newStack = function (type) {
        var _a;
        var stack = type === 'map'
            ? {
                type: type,
                variables: {},
                result: undefined,
                terminate: false,
                context: [],
            }
            : {
                type: type,
                variables: {},
                result: undefined,
                terminate: false,
            };
        this.stack.push(stack);
        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'New stack: %O', this.stackTop());
    };
    MapInterpreter.prototype.popStack = function () {
        var _a;
        var last = this.stack.pop();
        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Popped stack: %O', last);
    };
    MapInterpreter.prototype.stackTop = function (assertType) {
        if (this.stack.length === 0) {
            throw new lib_1.UnexpectedError('Trying to get variables out of scope!');
        }
        var stack = this.stack[this.stack.length - 1];
        if (assertType !== undefined && stack.type !== assertType) {
            throw new lib_1.UnexpectedError("Trying to get '" + assertType + "', but got " + stack.type + "!");
        }
        return stack;
    };
    MapInterpreter.prototype.visitCallCommon = function (node) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var operation, args, _b, _c, assignment, _d, _e, e_8_1, _f, data, error;
            var e_8, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        operation = this.operations[node.operationName];
                        if (!operation) {
                            throw new map_interpreter_errors_1.MapASTError("Operation not found: " + node.operationName, {
                                node: node,
                                ast: this.ast,
                            });
                        }
                        (_a = this.log) === null || _a === void 0 ? void 0 : _a.call(this, 'Calling operation:', operation.name);
                        args = {};
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 6, 7, 8]);
                        _b = __values(node.arguments), _c = _b.next();
                        _h.label = 2;
                    case 2:
                        if (!!_c.done) return [3 /*break*/, 5];
                        assignment = _c.value;
                        _d = lib_1.mergeVariables;
                        _e = [args];
                        return [4 /*yield*/, this.visit(assignment)];
                    case 3:
                        args = _d.apply(void 0, _e.concat([_h.sent()]));
                        _h.label = 4;
                    case 4:
                        _c = _b.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_8_1 = _h.sent();
                        e_8 = { error: e_8_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_c && !_c.done && (_g = _b.return)) _g.call(_b);
                        }
                        finally { if (e_8) throw e_8.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        this.newStack('operation');
                        this.addVariableToStack({ args: args });
                        return [4 /*yield*/, this.visit(operation)];
                    case 9:
                        _h.sent();
                        _f = this.stackTop('operation'), data = _f.result, error = _f.error;
                        this.popStack();
                        return [2 /*return*/, { data: data, error: error }];
                }
            });
        });
    };
    MapInterpreter.prototype.iterate = function (node, processResult) {
        var e_9, _a;
        return __awaiter(this, void 0, void 0, function () {
            var iterationParams, _b, _c, variable, condition, result, e_9_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.visit(node.iteration)];
                    case 1:
                        iterationParams = _d.sent();
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 11, 12, 17]);
                        _b = __asyncValues(iterationParams.iterable);
                        _d.label = 3;
                    case 3: return [4 /*yield*/, _b.next()];
                    case 4:
                        if (!(_c = _d.sent(), !_c.done)) return [3 /*break*/, 10];
                        variable = _c.value;
                        // overwrite the iteration variable instead of merging
                        this.stackTop().variables[iterationParams.iterationVariable] = variable;
                        if (!node.condition) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.visit(node.condition)];
                    case 5:
                        condition = _d.sent();
                        if (condition === false) {
                            return [3 /*break*/, 9];
                        }
                        _d.label = 6;
                    case 6: return [4 /*yield*/, this.visitCallCommon(node)];
                    case 7:
                        result = _d.sent();
                        return [4 /*yield*/, processResult(result.data, result.error)];
                    case 8:
                        _d.sent();
                        // return early check
                        if (this.stackTop().terminate) {
                            return [3 /*break*/, 10];
                        }
                        _d.label = 9;
                    case 9: return [3 /*break*/, 3];
                    case 10: return [3 /*break*/, 17];
                    case 11:
                        e_9_1 = _d.sent();
                        e_9 = { error: e_9_1 };
                        return [3 /*break*/, 17];
                    case 12:
                        _d.trys.push([12, , 15, 16]);
                        if (!(_c && !_c.done && (_a = _b.return))) return [3 /*break*/, 14];
                        return [4 /*yield*/, _a.call(_b)];
                    case 13:
                        _d.sent();
                        _d.label = 14;
                    case 14: return [3 /*break*/, 16];
                    case 15:
                        if (e_9) throw e_9.error;
                        return [7 /*endfinally*/];
                    case 16: return [7 /*endfinally*/];
                    case 17: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.initializeInput = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, value, e_10_1;
            var e_10, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, 8, 9]);
                        _a = __values(Object.values(input)), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 6];
                        value = _b.value;
                        if (!interfaces_1.isInitializable(value)) return [3 /*break*/, 3];
                        return [4 /*yield*/, value.initialize()];
                    case 2:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        if (!(value !== undefined && value !== null && lib_1.isNonPrimitive(value))) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.initializeInput(value)];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_10_1 = _d.sent();
                        e_10 = { error: e_10_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_10) throw e_10.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.destroyInput = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, value, e_11_1;
            var e_11, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, 8, 9]);
                        _a = __values(Object.values(input)), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 6];
                        value = _b.value;
                        if (!interfaces_1.isDestructible(value)) return [3 /*break*/, 3];
                        return [4 /*yield*/, value.destroy()];
                    case 2:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        if (!(value !== undefined && value !== null && lib_1.isNonPrimitive(value))) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.destroyInput(value)];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_11_1 = _d.sent();
                        e_11 = { error: e_11_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_11) throw e_11.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    MapInterpreter.prototype.resolveVariables = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var result, _a, _b, _c, key, value, _d, _e, e_12_1;
            var e_12, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (interfaces_1.isBinaryData(input)) {
                            throw new lib_1.UnexpectedError('BinaryData cannot be used as outcome');
                        }
                        if (input === undefined || input === null || lib_1.isPrimitive(input)) {
                            return [2 /*return*/, input];
                        }
                        result = {};
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 6, 7, 8]);
                        _a = __values(Object.entries(input)), _b = _a.next();
                        _g.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        _d = result;
                        _e = key;
                        return [4 /*yield*/, this.resolveVariables(value)];
                    case 3:
                        _d[_e] = _g.sent();
                        _g.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_12_1 = _g.sent();
                        e_12 = { error: e_12_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                        }
                        finally { if (e_12) throw e_12.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, result];
                }
            });
        });
    };
    return MapInterpreter;
}());
exports.MapInterpreter = MapInterpreter;
//# sourceMappingURL=map-interpreter.js.map