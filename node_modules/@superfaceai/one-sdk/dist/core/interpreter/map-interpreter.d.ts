import type { AssignmentNode, CallStatementNode, ConditionAtomNode, HttpCallStatementNode, HttpRequestNode, HttpResponseHandlerNode, HttpSecurityRequirement, InlineCallNode, IterationAtomNode, JessieExpressionNode, LiteralNode, MapASTNode, MapAstVisitor, MapDefinitionNode, MapDocumentNode, MapHeaderNode, ObjectLiteralNode, OperationDefinitionNode, OutcomeStatementNode, PrimitiveLiteralNode, SetStatementNode } from '@superfaceai/ast';
import type { IConfig, ICrypto, ILogger, MapInterpreterError } from '../../interfaces';
import type { NonPrimitive, Primitive, Result, Variables } from '../../lib';
import type { IServiceSelector } from '../services';
import type { MapInterpreterExternalHandler } from './external-handler';
import type { AuthCache, HttpResponse, SecurityConfiguration } from './http';
import type { IFetch } from './http/interfaces';
export interface MapParameters<TInput extends NonPrimitive | undefined = undefined> {
    usecase?: string;
    input?: TInput;
    parameters?: Record<string, string>;
    services: IServiceSelector;
    security: SecurityConfiguration[];
}
declare type HttpResponseHandler = (response: HttpResponse) => Promise<boolean>;
declare type HttpResponseHandlerDefinition = [
    handler: HttpResponseHandler,
    accept?: string
];
interface OutcomeDefinition {
    result?: Variables;
    error: boolean;
    terminateFlow: boolean;
}
interface HttpRequest {
    contentType?: string;
    contentLanguage?: string;
    headers?: Variables;
    queryParameters?: NonPrimitive;
    body?: Variables;
    security: HttpSecurityRequirement[];
}
declare type IterationDefinition = {
    iterationVariable: string;
    iterable: Iterable<Variables>;
};
export declare class MapInterpreter<TInput extends NonPrimitive | undefined> implements MapAstVisitor {
    private readonly parameters;
    private operations;
    private stack;
    private ast?;
    private readonly http;
    private readonly externalHandler;
    private readonly config;
    private readonly logger?;
    private readonly log;
    constructor(parameters: MapParameters<TInput>, { fetchInstance, externalHandler, config, logger, crypto, }: {
        fetchInstance: IFetch & AuthCache;
        externalHandler?: MapInterpreterExternalHandler;
        config: IConfig;
        crypto: ICrypto;
        logger?: ILogger;
    });
    perform(ast: MapDocumentNode): Promise<Result<Variables | undefined, MapInterpreterError>>;
    visit(node: PrimitiveLiteralNode): Primitive;
    visit(node: ObjectLiteralNode): Promise<NonPrimitive>;
    visit(node: SetStatementNode): Promise<void>;
    visit(node: OutcomeStatementNode): Promise<OutcomeDefinition | undefined>;
    visit(node: AssignmentNode): Promise<NonPrimitive>;
    visit(node: LiteralNode): Promise<Variables>;
    visit(node: ConditionAtomNode): Promise<boolean>;
    visit(node: HttpRequestNode): Promise<HttpRequest>;
    visit(node: InlineCallNode): Promise<Variables | undefined>;
    visit(node: IterationAtomNode): Promise<IterationDefinition>;
    visit(node: HttpResponseHandlerNode): HttpResponseHandlerDefinition;
    visit(node: JessieExpressionNode): Variables | Primitive | undefined;
    visit(node: MapDocumentNode): Promise<{
        result?: Variables;
        error?: MapInterpreterError;
    }>;
    visit(node: MapASTNode): Promise<Variables | undefined>;
    visitAssignmentNode(node: AssignmentNode): Promise<NonPrimitive>;
    visitConditionAtomNode(node: ConditionAtomNode): Promise<boolean>;
    visitCallStatementNode(node: CallStatementNode): Promise<void>;
    visitHttpCallStatementNode(node: HttpCallStatementNode): Promise<void>;
    visitHttpRequestNode(node: HttpRequestNode): Promise<HttpRequest>;
    visitHttpResponseHandlerNode(node: HttpResponseHandlerNode): HttpResponseHandlerDefinition;
    visitInlineCallNode(node: InlineCallNode): Promise<Variables | undefined>;
    visitIterationAtomNode(node: IterationAtomNode): Promise<IterationDefinition>;
    visitJessieExpressionNode(node: JessieExpressionNode): Variables | undefined;
    visitPrimitiveLiteralNode(node: PrimitiveLiteralNode): Primitive;
    private processStatements;
    visitMapDefinitionNode(node: MapDefinitionNode): Promise<Variables | undefined>;
    visitMapDocumentNode(node: MapDocumentNode): Promise<Variables | undefined>;
    visitMapHeaderNode(_node: MapHeaderNode): never;
    visitObjectLiteralNode(node: ObjectLiteralNode): Promise<NonPrimitive>;
    visitOperationDefinitionNode(node: OperationDefinitionNode): Promise<void>;
    visitOutcomeStatementNode(node: OutcomeStatementNode): Promise<OutcomeDefinition | undefined>;
    visitSetStatementNode(node: SetStatementNode): Promise<void>;
    private get variables();
    private addVariableToStack;
    private constructObject;
    private newStack;
    private popStack;
    private stackTop;
    private visitCallCommon;
    private iterate;
    private initializeInput;
    private destroyInput;
    private resolveVariables;
}
export {};
